# Generated API client for path: {{ path }}
from string import Template
from typing import Any

from pydantic import BaseModel

from unique_toolkit._common.endpoint_builder import HttpMethods, build_api_operation
from unique_toolkit._common.endpoint_requestor import build_requestor, RequestorType

{% if has_path_params %}
from .models import PathParams{% for operation in operations %}, {{ operation.method_prefix }}Request, {{ operation.response_model }}{% if operation.has_query_params %}, {{ operation.method_prefix }}QueryParams{% endif %}{% endfor %}
{% else %}
from .models import {% for operation in operations %}{{ operation.method_prefix }}Request, {{ operation.response_model }}{% if operation.has_query_params %}, {{ operation.method_prefix }}QueryParams{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}


class _EmptyPathParams(BaseModel):
    """Empty path parameters model for endpoints without path parameters."""
    pass
{% endif %}


"""API client for {{ path }} with {{ class_name }}"""

{% for operation in operations %}
{% if has_path_params %}
class _{{ operation.method_prefix }}CombinedParams(PathParams, {{ operation.method_prefix }}Request):
    """Combined path and request parameters for {{ operation.method|upper }}"""
    pass
{% endif %}

{{ operation.name }} = build_requestor(
    requestor_type=RequestorType.REQUESTS,
    operation_type=build_api_operation(
        method=HttpMethods.{{ operation.method|upper }},
        url_template=Template("{{'{base_url}' + path}}"),
        path_params_constructor={% if has_path_params %}PathParams{% else %}_EmptyPathParams{% endif %},
        payload_constructor={{ operation.method_prefix }}Request,
        response_model_type={{ operation.response_model }},
    ),
    {% if has_path_params %}
    combined_model=_{{ operation.method_prefix }}CombinedParams,
    {% else %}
    combined_model={{ operation.method_prefix }}Request,
    {% endif %}
)
{% if not loop.last %}

{% endif %}
{% endfor %}

