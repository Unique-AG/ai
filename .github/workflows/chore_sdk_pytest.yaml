name: "[pytest] Unique SDK"

env:
  PACKAGE: unique_sdk

on: 
  pull_request:
    paths:
      - 'unique_sdk/**'


jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper diff comparison

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      run: |
        POETRY_VERSION='1.8.3'
        PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin pipx install poetry==$POETRY_VERSION

    - name: Install dependencies
      working-directory: ${{ env.PACKAGE }}
      run: poetry install

    - name: Check CHANGELOG.md is updated
      run: |
        # Get the merge base between the PR and target branch
        git fetch origin ${{ github.base_ref }}
        MERGE_BASE=$(git merge-base HEAD origin/${{ github.base_ref }})
        
        if ! git diff --name-only $MERGE_BASE..HEAD | grep -q "^${{ env.PACKAGE }}/CHANGELOG.md$"; then
          echo "❌ Error: ${{ env.PACKAGE }}/CHANGELOG.md must be updated in this PR"
          echo "Please add an entry to the changelog describing your changes."
          exit 1
        else
          echo "✅ ${{ env.PACKAGE }}/CHANGELOG.md has been updated"
        fi

    - name: Check pyproject.toml version is updated
      run: |
        # Get the merge base between the PR and target branch
        git fetch origin ${{ github.base_ref }}
        MERGE_BASE=$(git merge-base HEAD origin/${{ github.base_ref }})
        
        # Check if pyproject.toml exists and has been modified
        if ! git diff --name-only $MERGE_BASE..HEAD | grep -q "^${{ env.PACKAGE }}/pyproject.toml$"; then
          echo "❌ Error: ${{ env.PACKAGE }}/pyproject.toml must be updated in this PR"
          echo "Please update the version in pyproject.toml to reflect your changes."
          exit 1
        fi
        
        # Extract version from base branch
        BASE_VERSION=$(git show $MERGE_BASE:${{ env.PACKAGE }}/pyproject.toml | grep -E '^version\s*=' | sed -E 's/version\s*=\s*"([^"]+)"/\1/')
        
        # Extract version from current branch
        CURRENT_VERSION=$(grep -E '^version\s*=' ${{ env.PACKAGE }}/pyproject.toml | sed -E 's/version\s*=\s*"([^"]+)"/\1/')
        
        echo "Base branch version: $BASE_VERSION"
        echo "Current branch version: $CURRENT_VERSION"
        
        # Check if version has been updated
        if [ "$BASE_VERSION" = "$CURRENT_VERSION" ]; then
          echo "❌ Error: Version in ${{ env.PACKAGE }}/pyproject.toml has not been updated"
          echo "Please bump the version number to reflect your changes."
          echo "Current version: $CURRENT_VERSION"
          exit 1
        else
          echo "✅ Version has been updated from $BASE_VERSION to $CURRENT_VERSION"
        fi

    - name: Run tests
      working-directory: ${{ env.PACKAGE }}
      run: poetry run pytest