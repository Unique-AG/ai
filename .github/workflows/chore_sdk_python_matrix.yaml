name: "[matrix] Unique SDK Python Compatibility"

env:
  PACKAGE: unique_sdk

on: 
  pull_request:
    paths:
      - 'unique_sdk/**'
  push:
    branches:
      - main
    paths:
      - 'unique_sdk/**'
  workflow_dispatch:

jobs:
  python-compatibility:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        # You can add more versions as they become stable
        # python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14']

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-

    - name: Install Poetry
      run: |
        POETRY_VERSION='1.8.3'
        PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin pipx install poetry==$POETRY_VERSION

    - name: Install dependencies
      working-directory: ${{ env.PACKAGE }}
      run: |
        echo "📦 Installing dependencies for Python ${{ matrix.python-version }}"
        poetry install --with dev
        echo "✅ Dependencies installed successfully"
        echo "📋 Checking installed packages:"
        poetry show

    - name: Verify package installation
      working-directory: ${{ env.PACKAGE }}
      run: |
        echo "🔍 Verifying package installation for Python ${{ matrix.python-version }}"
        poetry run python -c "import unique_sdk; print('✅ unique_sdk imports successfully')"
        poetry run python -c "import unique_sdk._api_resource; print('✅ unique_sdk._api_resource imports successfully')"
        echo "📋 Python path:"
        poetry run python -c "import sys; print('\n'.join(sys.path))"

    - name: Run tests
      working-directory: ${{ env.PACKAGE }}
      run: |
        echo "🧪 Running tests for Python ${{ matrix.python-version }}"
        poetry run pytest --import-mode importlib -v

    - name: Run tests with coverage (Python 3.11 only)
      if: matrix.python-version == '3.11'
      working-directory: ${{ env.PACKAGE }}
      run: |
        echo "📊 Running tests with coverage for Python ${{ matrix.python-version }}"
        poetry run pytest --cov=unique_sdk tests/ --import-mode importlib --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ${{ env.PACKAGE }}/coverage.xml
        flags: unique_sdk
        name: unique_sdk-python-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-python-${{ matrix.python-version }}
        path: ${{ env.PACKAGE }}/htmlcov/

  # Summary job
  compatibility-summary:
    name: Compatibility Summary
    runs-on: ubuntu-latest
    needs: python-compatibility
    if: always()
    steps:
    - name: Generate compatibility report
      run: |
        echo "# 🐍 Python Compatibility Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Python Version | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 3.9  | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 3.10 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 3.11 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 3.12 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 3.13 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 What was tested:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code linting (ruff)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Type checking (pyright)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Unit tests (pytest)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Coverage report (Python 3.11 only)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Review any failed tests in the logs above" >> $GITHUB_STEP_SUMMARY
        echo "- Check coverage reports in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Update supported Python versions in pyproject.toml if needed" >> $GITHUB_STEP_SUMMARY
