name: "[unique_toolkit ðŸ“¦] Publish to PyPI"

on:
  workflow_dispatch:
  push:
    # Both conditions must be met (AND logic):
    # 1. Push must be to main branch
    # 2. Push must include changes to unique_toolkit/** files
    # 3. Exclude docs-only and mkdocs config changes to avoid unnecessary publishes
    paths:
      - 'unique_toolkit/**'
      - '!unique_toolkit/**/docs/**'
      - '!unique_toolkit/**/mkdocs.yaml'
    branches:
      - main

env:
  PACKAGE_NAME: unique_toolkit
  PACKAGE_DIR: ./unique_toolkit
    
jobs:
  build-and-publish:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      run: |
            POETRY_VERSION='1.8.3'
            PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin pipx install poetry==$POETRY_VERSION

    - name: Install dependencies
      working-directory: ${{ env.PACKAGE_DIR }}
      run: poetry install

    - name: Build Package
      working-directory: ${{ env.PACKAGE_DIR }}
      run: poetry build

    - name: Check version and publish to PyPI
      working-directory: ${{ env.PACKAGE_DIR }}
      run: |
        CURRENT_VERSION=$(poetry version -s)
        LATEST_VERSION=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json | jq -r '.info.version' 2>/dev/null || echo "0.0.0")
        if [ "$LATEST_VERSION" = "null" ]; then
          LATEST_VERSION="0.0.0"
        fi
        
        if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
          echo "Version $CURRENT_VERSION already exists on PyPI. Skipping publish."
        else
          echo "New version detected. Publishing $CURRENT_VERSION to PyPI..."
          poetry publish
        fi
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
    